Немного об устройстве Git (упрощённо).

Git — распределённая VCS. Это значит, что мы работаем не с одним репозитарием на сервере, а каждый имеет у себя локальную копию репозитария.

О главном.
1. master — это та ветка, которая всегда, в любой (!) момент должна быть готова к деплою на продакшн.
2. Поэтому мы никогда не делаем новые фичи и багфиксы сразу в master, используем для этого ветки.
3.	Одна фича — одна ветка.
	Один багфикс (если предполагается длиннее двух коммитов) — одна ветка.
	Один эксперимент — одна ветка.
	Одна фича внутри эксперимента — ветка от ветки.
4. Всегда пишем вразумительные комментарии к коммитам
5.После того, как фича (багфикс) написаны, оттестированы и готовы к продакшну, мержим ветку в master.

Настройка
Создания пользователя
$ git config --global user.name «First Last»
$ git config --global user.email «email@example.com»

Для того чтобы включить подсветку вывода в консоли для GIT, необходимо выполнить команды:
$ git config --global color.diff true
$ git config --global color.status true
$ git config --global color.branch true
$ git config --global color.interactive true

Команды git

Основные команды
$ git add -		Добавляет файл в индекс
$ git status -	Показывает состояния файлов в рабочей директории и индексе
$ git commit -	Берёт все данные, добавленные в индекс с помощью git add, и сохраняет их
$ git rm -		Используется в Git для удаления файлов из индекса и рабочей директории

Ветвление и слияния
$ git branch -		это своего рода “менеджер веток”. Она умеет перечислять ваши ветки, создавать новые, удалять и переименовывать их
$ git checkout -	Используется для переключения веток и выгрузки их содержимого в рабочую директорию
$ git merge -		Используется для слияния одной или нескольких веток в текущую
$ git log -			Используется для просмотра истории коммитов, начиная с самого свежего и уходя к истокам проекта
$ git tag -			Используется для задания постоянной метки на какой-либо момент в истории проекта. Обычно она используется для релизов.

Совместная работа и обновление проектов
$ git fetch -		Cвязывается с удалённым репозиторием и забирает из него все изменения, которых у вас пока нет и сохраняет их локально
$ git merge -		Регистрация двух или более историй развития вместе
$git pull-			Работает как комбинация команд git fetch и git merge вначале забирает изменения из указанного удалённого репозитория, а затем пытается слить их с текущей веткой.
$ git push -		Используется для установления связи с удалённым репозиторием, вычисления локальных изменений отсутствующих в нём, и собственно их передачи в вышеупомянутый репозиторий. Этой команде нужно право на запись в репозиторий, поэтому она использует аутентификацию.
$ git remote -		Служит для управления списком удалённых репозиториев. Она позволяет сохранять длинные URL репозиториев в виде понятных коротких строк, например “origin”, так что вам не придётся забивать голову всякой ерундой и набирать её каждый раз для связи с сервером
$ git archive -		Используется для упаковки в архив указанных коммитов или всего репозитория